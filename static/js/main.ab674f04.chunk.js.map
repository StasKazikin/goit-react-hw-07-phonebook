{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/ContactList/ContactList.module.scss","components/Filter/Filter.module.scss","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","contactsOperations","fetchContacts","dispatch","a","get","data","addContact","newContact","contact","name","number","post","then","catch","error","deleteContact","contactId","delete","getFilter","state","contacts","filter","contactsSelectors","getLoading","loading","getContacts","getFilteredContacts","createSelector","items","normalizedFilter","toLowerCase","includes","ContactForm","nameInputId","shortid","generate","numberInputId","handleInput","event","currentTarget","value","setState","reset","sameContact","contactName","find","handleSubmit","preventDefault","props","onSubmit","alert","this","className","form","label","htmlFor","input","type","pattern","title","required","onChange","id","button","Component","connect","target","list","map","item","onClick","App","isLoading","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab674f04.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3s7VJ\",\"label\":\"ContactForm_label__2lowA\",\"input\":\"ContactForm_input__2mcXF\",\"button\":\"ContactForm_button__3KRvX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__a0mAN\",\"item\":\"ContactList_item__2w36l\",\"button\":\"ContactList_button__39-96\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__fWPi3\",\"input\":\"Filter_input__HKi-Y\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n\r\n  // axios\r\n  //   .get('/contacts')\r\n  //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n  //   .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = newContact => dispatch => {\r\n  const contact = {\r\n    name: newContact.name,\r\n    number: newContact.number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nconst contactsOperations = {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n};\r\n\r\nexport default contactsOperations;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getContacts = state => state.contacts;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n// const getFilteredContacts = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\nconst getFilteredContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nconst contactsSelectors = {\r\n  getLoading,\r\n  getContacts,\r\n  getFilter,\r\n  getFilteredContacts,\r\n};\r\n\r\nexport default contactsSelectors;\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport { form, label, input, button } from './ContactForm.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleInput = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  sameContact = (contactName, contacts) => {\r\n    return contacts.find(({ name }) => {\r\n      return name.toLowerCase() === contactName.toLowerCase();\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n\r\n    const { contacts } = this.props;\r\n\r\n    if (this.sameContact(name, contacts.items)) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    if (name !== '') {\r\n      this.props.onSubmit({ name, number });\r\n      this.reset();\r\n      return;\r\n    }\r\n    alert('Введите имя контакта');\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form className={form} onSubmit={this.handleSubmit}>\r\n        <label className={label} htmlFor={this.nameInputId}>\r\n          Name\r\n          <input\r\n            className={input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.handleInput}\r\n            id={this.nameInputId}\r\n          ></input>\r\n        </label>\r\n        <label className={label} htmlFor={this.numberInputId}>\r\n          Number\r\n          <input\r\n            className={input}\r\n            type=\"text\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.handleInput}\r\n            id={this.numberInputId}\r\n          ></input>\r\n        </label>\r\n        <button className={button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelectors.getContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: newContact => dispatch(contactsOperations.addContact(newContact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import PropTypes from 'prop-types';\r\nimport { label, input } from './Filter.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label className={label}>\r\n      Find contacts by name\r\n      <input\r\n        className={input}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={onChange}\r\n      ></input>\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import PropTypes from 'prop-types';\r\nimport { list, item, button } from './ContactList.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => {\r\n  return (\r\n    <ul className={list}>\r\n      {contacts.map(({ name, number, id }) => (\r\n        <li className={item} key={id}>\r\n          <span>\r\n            {name}: {number}\r\n          </span>\r\n          <button\r\n            className={button}\r\n            id={id}\r\n            type=\"button\"\r\n            onClick={() => deleteContact(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getFilteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport { contactsOperations, contactsSelectors } from './redux/contacts';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        {this.props.isLoading && <h1>Загружаются контакты</h1>}\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoading: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({ items, filter, loading, error });\r\n","// import { createStore } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import { combineReducers } from \"redux\";\r\n\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// export const persistor = persistStore(store);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\n// import { store, persistor } from './redux/store';\nimport store from './redux/store';\nimport { BrowserRouter } from 'react-router-dom';\n// import { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}